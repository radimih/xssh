#!/usr/bin/env bash

# Один YAML-файл описывает одно SSH-соединение. Формат:
#
# name: <произвольное название>
# host: <IP или DNS-имя хоста>
# user: <имя пользователя, под которым будет создано SSH-соединение>
# [password: <пароль>]

set -euo pipefail

config_dir=${XDG_CONFIG_HOME:-$HOME/.config/xssh}
config_file=$config_dir/xssh.conf

mkdir -p $config_dir
if [[ ! -e $config_file ]]
then
  cat > $config_file <<END
XSSH_CONNECTIONS_DIR=~/.ssh/connections
END
fi

source $config_file

# ******************************************************************************
# main - Главная процедура, с которой начинается выполнение скрипта
# ----

main()
{
    connections_dir="${XSSH_CONNECTIONS_DIR}"
    connections_dir="${connections_dir/#~/$HOME}"  # заменить '~' на домашний каталог пользователя
    connections_dir="${connections_dir%/}/"  # добавить слэш в конце, если его ещё нет

    if [[ $# -eq 0 ]]
    then
        tempfile="$(mktemp --quiet --tmpdir --suffix=.txt xssh-XXXX)"

        ranger --choosefile="$tempfile" $connections_dir || (rm "$tempfile"; return 1)  # В работе ranger произошла ошибка

        connection_file="$(cat "$tempfile")"
        rm "$tempfile"

        [[ -z "$connection_file" ]] && return 1  # В ranger ничего не выбрано
    else
        connection_file="$1"
    fi

    connection_file_ext="${connection_file##*.}"
    connection_dir="$(dirname $connection_file)/"
    connection_path="${connection_dir#$connections_dir}"  # путь относительно $connections_dir

    [[ "$connection_dir" == "$connection_path" ]] && return 1  # выбранный файл не находится в поддиректории $connections_dir
    [[ "$connection_file_ext" == "yml" || "$connection_file_ext" == "yaml" ]] || return 1

    convert_python_script="import json, pathlib, yaml; print(json.dumps(yaml.safe_load(pathlib.Path('$connection_file').read_text())))"
    connection_json="$(python3 -c "$convert_python_script")"

    conn_name=$(echo "$connection_json" | jq --raw-output --exit-status '.name')
    conn_host=$(echo "$connection_json" | jq --raw-output --exit-status '.host')
    conn_user=$(echo "$connection_json" | jq --raw-output --exit-status '.user')
    conn_password=$(echo "$connection_json" | jq --raw-output '.password')
    [[ "$conn_password" == "null" ]] && conn_password=""

    echo -e "Connect to \033[1m${conn_name}\033[0m ($conn_host) in \033[1m${connection_path:-/}\033[0m as ${conn_user} ..."
    echo

    SSHPASS="$conn_password" sshpass -e ssh -o StrictHostKeyChecking=no ${conn_user}@${conn_host}
}

main $*
